'********DO NOT remove or change the expand line or the included file contents******************
'  MachStdMIll license terms REQUIRE that the copyright and License terms remain a part of this source file
#expand <Masters\Headers\CopyRightAndLicenseNotice>	
'**************************************************************************************

function MSMAPI_GetToolDescription(ByVal TN as integer) as string
	'This is a MSM replacement for the Mach script call GetToolDescription. It it required to uses this call for MSM on mach v3 instead of the native mach call. 
	'This provides the same info as the mach call it replaces but handles the extended tool table attribute info that MSM stores in the tool table description.
	
	Dim QFN As String
	Dim result as integer
	
	' set the global vaules up that the supporting MSM API script expects
	SetUserDRO(MSMAPIRSNumericParam1DRO, cDbl(TN))			' TN to pass to script
	SetUserLabel(MSMAPIRSStringParam1UserLabel, "")				' string to get back from script
	SetUserDRO(MSMAPIRSReturnValueDRO, 1)					' iniut error indicator from script to failure
	
	QFN = "ScreenSetMacros\" & GetActiveScreenSetName() & "\Masters\Scripts\Common\MSMAPI_GetToolDesc"
	
	result = RunScript(QFN)	
	if result < 0 then
		' error - script was not run
		MSMAPI_GetToolDescription = ""	'  RS failed, return null string
	else
		' script that ran has set vlaues into the global params as needed for that script
		if GetUserDRO(MSMAPIRSReturnValueDRO) = 0 then
			' no error from script
			MSMAPI_GetToolDescription = GetUserLabel(MSMAPIRSStringParam1UserLabel)
		else
			MSMAPI_GetToolDescription = ""	'  script returned error, return null string
		end if
	end if
	exit function
end function


sub MSMAPI_SetToolDescription(ByVal TN as integer, ByVal Tdesc as string)
	'This is a MSM replacement for the Mach script call SetToolDescription. It it required to uses this call for MSM on mach v3 instead of the native mach call. 
	'This provides the same action as the mach call it replaces but handles the extended tool table attribute info that MSM stores in the tool table description.
	' set the global vaules up that the supporting MSM API script expects

	Dim QFN As String
	Dim result as integer
	
	SetUserDRO(MSMAPIRSNumericParam1DRO, cDbl(TN))			' TN to pass to script
	SetUserLabel(MSMAPIRSStringParam1UserLabel, Tdesc)			' string to set desc to
	
	QFN = "ScreenSetMacros\" & GetActiveScreenSetName() & "\Masters\Scripts\Common\MSMAPI_SetToolDesc"
	
	result = RunScript(QFN)	
	' Mach call does not return any indication of success/failure and neither does this API (so we match)
	exit sub
end sub




' ********************************************'
' This is the MSMAPI exposed Expand file that user scripts pull in to get the MSM APIs
' use of this script requires that the user script have already included the MSMAPIConstants header file
'
' Do not modify the code in this file as MSM will update this file from release to release as needed.

Function MSMAPI_RSCall(ByVal MSMScriptName As String, _
				  ByRef P1 As variant, _
				  ByRef P2 As variant, _
				  ByRef P3 As variant, _
				  ByRef P4 As variant, _
				  ByRef P5 As variant ) as Integer
				  
	
	' This is a wrapper that provides parametr passing fucntionality for mach's RunScript call.
	
	'Variable type constants from Cypress manual
	Const VarTypeEmpty = 0 
	Const VarTypeNull = 1
	Const VarTypeINteger = 2
	Const VarTypeLong = 3
	Const VarTypeSingle = 4
	Const VarTypeDouble = 5
	Const VarTypeCurrency = 6
	Const VarTypeDateTime = 7
	Const VarTypeString = 8
	const VarTypeObject = 9
	Const VarTYpeBoolean = 11
	Const VartTypeByte = 17
	
	
	
	Dim QFN As String
	Dim result as integer
	
	' first thing to do is get the parameters and store them in the globals according to type.
	' this is a bit inelegant, but we are working with the tools we have available and this simple convetion does the job
	
	select case  VarType(p1)
	Case VarTypeInteger, VarTypeLong, VarTypeSingle, VarTypeDouble:
		SetUserDRO(MSMAPIRSNumericParam1DRO, cDbl(p1))
		
	Case VarTypeString:
		SetUserLabel(MSMAPIRSStringParam1UserLabel, cStr(p1))
	
	Case VarTypeBoolean:
		if p1 then
			SetUserDRO(MSMAPIRSNumericParam1DRO, cDbl(1))
		else
			SetUserDRO(MSMAPIRSNumericParam1DRO, cDbl(0))
		end if
		
	Case VarTypeCurrency, VarTypeDateTime, VarTypeEmpty, VarTypeNull:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	Case else:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	end select
	
	select case  VarType(p2)
	Case VarTypeInteger, VarTypeLong, VarTypeSingle, VarTypeDouble:
		SetUserDRO(MSMAPIRSNumericParam2DRO, cDbl(p2))
		
	Case VarTypeString:
		SetUserLabel(MSMAPIRSStringParam2UserLabel, cStr(p2))
	
	Case VarTypeBoolean:
		if p1 then
			SetUserDRO(MSMAPIRSNumericParam2DRO, cDbl(1))
		else
			SetUserDRO(MSMAPIRSNumericParam2DRO, cDbl(0))
		end if
		
	Case VarTypeCurrency, VarTypeDateTime, VarTypeEmpty, VarTypeNull:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	Case else:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	end select
	
	select case  VarType(p3)
	Case VarTypeInteger, VarTypeLong, VarTypeSingle, VarTypeDouble:
		SetUserDRO(MSMAPIRSNumericParam3DRO, cDbl(p3))
		
	Case VarTypeString:
		SetUserLabel(MSMAPIRSStringParam3UserLabel, cStr(p3))
	
	Case VarTypeBoolean:
		if p1 then
			SetUserDRO(MSMAPIRSNumericParam3DRO, cDbl(1))
		else
			SetUserDRO(MSMAPIRSNumericParam3DRO, cDbl(0))
		end if
		
	Case VarTypeCurrency, VarTypeDateTime, VarTypeEmpty, VarTypeNull:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	Case else:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	end select
	
	select case  VarType(p4)
	Case VarTypeInteger, VarTypeLong, VarTypeSingle, VarTypeDouble:
		SetUserDRO(MSMAPIRSNumericParam4DRO, cDbl(p4))
		
	Case VarTypeString:
		SetUserLabel(MSMAPIRSStringParam4UserLabel, cStr(p4))
	
	Case VarTypeBoolean:
		if p1 then
			SetUserDRO(MSMAPIRSNumericParam4DRO, cDbl(1))
		else
			SetUserDRO(MSMAPIRSNumericParam4DRO, cDbl(0))
		end if
		
	Case VarTypeCurrency, VarTypeDateTime, VarTypeEmpty, VarTypeNull:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	Case else:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	end select
	
	select case  VarType(p5)
	Case VarTypeInteger, VarTypeLong, VarTypeSingle, VarTypeDouble:
		SetUserDRO(MSMAPIRSNumericParam5DRO, cDbl(p5))
		
	Case VarTypeString:
		SetUserLabel(MSMAPIRSStringParam5UserLabel, cStr(p5))
	
	Case VarTypeBoolean:
		if p1 then
			SetUserDRO(MSMAPIRSNumericParam5DRO, cDbl(1))
		else
			SetUserDRO(MSMAPIRSNumericParam5DRO, cDbl(0))
		end if
		
	Case VarTypeCurrency, VarTypeDateTime, VarTypeEmpty, VarTypeNull:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	Case else:
		' do nothing as we don't support passing this type of param as it does not map into an available Mach Global type
	end select
	
	
	QFN = "ScreenSetMacros\" & GetActiveScreenSetName() & "\Custom\" & MSMScriptName
	
	'MsgBox "Script to run: " & Chr(13) & "    " & QFN & _
	'	Chr(13) & " P1 = " & P1 & _
	'	   Chr(13) & " P2 = " & P2 & _
	'	   Chr(13) & " P3 = " & P3 & _
	'	   Chr(13) & " P4 = " & P4 & _
	'	   Chr(13) & " P5 = " & P5 
	
	On Error resume next
	result = RunScript(QFN)	
	if err then
		' Run script or the script it called raised an error
		on error goto 0
		message "MSMAPI_RSCall Mach RunScript Error " & chr(13) & _
			chr(13) & "err = " & err & ", " & err.description & _
			chr(13) & "Script: " & QFN & Chr(13) & _
			Chr(13) & " P1 = " & P1 & _
			Chr(13) & " P2 = " & P2 & _
			Chr(13) & " P3 = " & P3 & _
			Chr(13) & " P4 = " & P4 & _
			Chr(13) & " P5 = " & P5
		sleep 200 ' this is a kludge to get mach to pause long enough to make the chances higher that we will get this message into the mach history log.
		MSMAPI_RSCall = cInt(0)	'  RS failed, no success for API call
		exit function
	end if
	on error goto 0
	
	if result < 0 then
		' error - script was not run
		SetUserDRO(MSMAPIRSReturnValueDRO, 0)	'  RS failed, no success for script call
		
		message "MSMAPI_RSCall Mach RunScript Error " & chr(13) & _
			chr(13) & "RS Error = " & RSErrorText(result) & _
			chr(13) & "Script: " & QFN & Chr(13) & _
			Chr(13) & " P1 = " & P1 & _
			Chr(13) & " P2 = " & P2 & _
			Chr(13) & " P3 = " & P3 & _
			Chr(13) & " P4 = " & P4 & _
			Chr(13) & " P5 = " & P5
		sleep 200 ' this is a kludge to get mach to pause long enough to make the chances higher that we will get this message into the mach history log.
	else
		' script that ran has set vlaues into the global params as needed for that script
		MSMAPI_RSCall = cInt(GetUserDRO(MSMAPIRSReturnValueDRO))
	end if
	exit function
End function


Function RSErrorText(ByVal RSErrorNum as integer) as string
	' small routine to convert RunsScript error vlaues to error text
	
	Select case RSErrorNum 
	Case 0:
		RSErrorText = "RunScript Success"
		
	' Case < 0  ' mach RS error number name - commented out as Brian never documented the RS return values
		'RSErrorText = "<text for number>"
	
	Case Else:
		RSErrorText = "Generic RunScript Error: " & RSErrorNum
	end select
	
	Exit Function
End Function

 
